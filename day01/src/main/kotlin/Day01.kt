import Day01.PUZZLE_INPUT
import Day01.sumAllDigitsThatMatchHalfwayAroundDigitInList
import Day01.sumAllDigitsThatMatchNextDigitInList

internal fun main(args: Array<String>) {
    println("Day 01 Pt. One Answer:\t" + sumAllDigitsThatMatchNextDigitInList(PUZZLE_INPUT))
    println("Day 01 Pt. Two Answer:\t" + sumAllDigitsThatMatchHalfwayAroundDigitInList(PUZZLE_INPUT))
}

/**
 * See <a href="https://adventofcode.com/2017/day/1">Day 1</a>
 */
internal object Day01 {

    internal val PUZZLE_INPUT = "237369991482346124663395286354672985457326865748533412179778188397835279584149971999" +
            "79851227942926872717175546141897455853824642998674753241784615752652323893135189854827954945669448843343" +
            "89827447822582791733233815719854542365693939757357153314382567955795141599465378683587359368324874229386" +
            "78194757687698143224139243151222475131337135843793611742383267186158665726927967655583875485515512626142" +
            "93535742185295377573374894192698337772538619618748613133745857482984872371135592968462522356448948559756" +
            "47683174328938366292552734527762323192654225334495499562447915655737277626874392218626327222771296133291" +
            "67189874939414298584616496839223239197277563641853746193232543222813298195169345186499866147586559781523" +
            "83459568349615158154682911274553334779621367381499584915632167437964432315925913192544496129682116748362" +
            "88123953915335725556241599392791253413351472346535729773455821357289943956316856181355636626898546919768" +
            "43435785879952751266627645653981281891643823717528757341136747881518611439246877373935758151119185587921" +
            "33217518933243652273214427861348671652589726287928777296952944551173692496277726239496154757924873134324" +
            "52419639147759912921771515544466951346535966334331718666185419572334635481421732358211681566368242334879" +
            "83766612338498874251672993917446366865832618475491341253973267556113323245113845148121546526396995991171" +
            "73983714747997864516641798891828928784438451397436939797437881984855215396165188152813462486945456348885" +
            "86252613567635627232617678735426837966757971243223827324372355449656479345148716725227773789315249947848" +
            "45817584793564974285139867972185887185987353468488155283698464226415951583138352839943621294117262483559" +
            "86766159629975398634724478633954317459426642281579465847762982938346182926199459131885158796355482945935" +
            "38928258479789718233472194685167848573486496931851721993982341237454152712228911611757887137334444975928" +
            "53221743138324235934216658323717267715318744537689459113188549896737581637879552568829548365738314593851" +
            "221113932919767844137362623398623853789938824592"

    /**
     * Solution for 01.1
     * @throws IllegalArgumentException if input contains any non-digit characters.
     */
    internal fun sumAllDigitsThatMatchNextDigitInList(input: String) = input.toCharArray()
            .map { c -> c.toDigit() }
            .filterIndexed { i, digit -> digit == input.readDigitAtIndex((i + 1) % input.length) }
            .sum()

    /**
     * Solution for 01.2
     * @throws IllegalArgumentException if input contains any non-digit characters or if input has odd length.
     */
    internal fun sumAllDigitsThatMatchHalfwayAroundDigitInList(input: String) = input.length.let {
        require(it % 2 == 0) { "Input length must be an even number." }
        input.toCharArray()
                .map { c -> c.toDigit() }
                .filterIndexed { i, digit -> digit == input.readDigitAtIndex(getIndexHalfwayAroundList(i, it)) }
                .sum()
    }

    private fun getIndexHalfwayAroundList(index: Int, listLength: Int) = (index + (listLength / 2)) % listLength
}
